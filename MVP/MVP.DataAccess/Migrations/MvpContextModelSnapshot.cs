// <auto-generated />
using System;
using MVP.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVP.DataAccess.Migrations
{
    [DbContext(typeof(MvpContext))]
    partial class MvpContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("mvp")
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVP.Entities.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BedCount");

                    b.Property<int>("LocationId");

                    b.Property<int>("OfficeId");

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OfficeId");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("MVP.Entities.Entities.ApartmentRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApartmentId");

                    b.Property<int>("AppartmentId");

                    b.Property<int>("BedCount");

                    b.Property<int>("RoomNumber");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentRoom");
                });

            modelBuilder.Entity("MVP.Entities.Entities.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentRoomId");

                    b.Property<DateTimeOffset>("End");

                    b.Property<DateTimeOffset>("Start");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentRoomId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("MVP.Entities.Entities.FlightInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<DateTimeOffset>("End");

                    b.Property<DateTimeOffset>("Start");

                    b.Property<int>("Status");

                    b.Property<int>("TripId");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("FlightInformation");
                });

            modelBuilder.Entity("MVP.Entities.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("MVP.Entities.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationId");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("MVP.Entities.Entities.RentalCarInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<DateTimeOffset>("End");

                    b.Property<DateTimeOffset>("Start");

                    b.Property<int>("Status");

                    b.Property<int>("TripId");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("RentalCarInformation");
                });

            modelBuilder.Entity("MVP.Entities.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("End");

                    b.Property<int>("FromOfficeId");

                    b.Property<DateTimeOffset>("Start");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("ToOfficeId");

                    b.Property<int>("TripStatus");

                    b.HasKey("Id");

                    b.HasIndex("FromOfficeId");

                    b.HasIndex("ToOfficeId");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("MVP.Entities.Entities.Apartment", b =>
                {
                    b.HasOne("MVP.Entities.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MVP.Entities.Entities.Office", "Office")
                        .WithMany("Apartments")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVP.Entities.Entities.ApartmentRoom", b =>
                {
                    b.HasOne("MVP.Entities.Entities.Apartment")
                        .WithMany("Rooms")
                        .HasForeignKey("ApartmentId");
                });

            modelBuilder.Entity("MVP.Entities.Entities.Calendar", b =>
                {
                    b.HasOne("MVP.Entities.Entities.ApartmentRoom", "ApartmentRoom")
                        .WithMany("Calendars")
                        .HasForeignKey("ApartmentRoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVP.Entities.Entities.FlightInformation", b =>
                {
                    b.HasOne("MVP.Entities.Entities.Trip", "Trip")
                        .WithMany("FlightInformations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVP.Entities.Entities.Office", b =>
                {
                    b.HasOne("MVP.Entities.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MVP.Entities.Entities.RentalCarInformation", b =>
                {
                    b.HasOne("MVP.Entities.Entities.Trip", "Trip")
                        .WithMany("RentalCarInformations")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MVP.Entities.Entities.Trip", b =>
                {
                    b.HasOne("MVP.Entities.Entities.Office", "FromOffice")
                        .WithMany()
                        .HasForeignKey("FromOfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MVP.Entities.Entities.Office", "ToOffice")
                        .WithMany()
                        .HasForeignKey("ToOfficeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
